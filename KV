#1 
std::pair - это класс, который предоставляет возможность хранить два разнородных объекта, как единое целое.
Используется когда нам нужно сохранить пару значений, например, в алгоритмах нахождения min и max, а также для хранения координат.
std::tuple - это класс, который представляет собой набор разнородных значений фиксированного размера (кортеж).
Таким образом, кортеж является обобщением. Кортеж удобно применять, если из функции нужно принять более одного значения или передавать
несколько аргументов в виде единого объекта. Также как и пара, кортеж может быть элементом массива.

#2
std::array рекомендуется использовать для любой сложной задачи (нетривиальной). Массивы созданные с его помощью более эффективны и используют меньше памяти. 
А из минусов только более сложный синтаксис, что может напрячь только в тривиальных задачах или небольших примерах, когда не надо заморачиваться над весом программы.

#3
std::vector надо использовать, когда нужно выделить динамичесскую память и иметь постоянный доступ к элементам.
Когда не нужно делать вставку и удаление в передней части контейнера. Это не эффективно в std::vector.

#4
std::deque управляет своими элементами с помощью динамического массива, обеспечивает произвольный доступ и имеет почти тот же интерфейс, что и vector.
Однако имеет значительно более быструю вставку и удаление как в конце, так и в начале, но довольно медленную в середине.

#5
std::list управляет своими элементами в виде двусвязного списка и не обеспечивает произвольный доступ. 
Вставка и извлечение элементов происходит быстро в каждом положении, включая оба конца. Также вставка и удаление элементов не делает 
недействительными указатели, ссылки и итераторы на другие элементы. 

#6
std::forward_list сохраняет внутри только ссылку на следующий элемент, в то время как std::list сохраняет две ссылки на элемент. Таким образом элементы
forward_list более эффективны.

#7
stack — это контейнерный класс, элементы которого работают по принципу: элементы добавляются в конец контейнера и удаляются оттуда же.
queue — это контейнерный класс, элементы которого работают по принципу: элементы добавляются в конец контейнера, но удаляются из начала контейнера.
priority_queue — это тип очереди, в которой все элементы отсортированы. При добавлении элемента, он автоматически сортируется.

#8
circular buffer — то структура данных, использующая единственный буфер фиксированного размера таким образом, как будто бы после последнего элемента 
сразу же снова идет первый. Такая структура легко предоставляет возможность буферизации потоков данных.

#9
В кольцевой буфере нет начала и конца, что не соответствует стандарту STL по итерации.

#10
По сути все типы, описанные в этих вопросах подходят для работы с многомерными массивами, кроме tuple и кольцевого буфера.
